name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.10.0'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run TypeScript type check
        run: npm run typecheck

  test-auth-service:
    name: Test Auth Service
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Build shared types
        run: npm run build --workspace=backend/shared/types
      
      - name: Run Auth Service tests
        run: npm test --workspace=backend/services/auth-service
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/services/auth-service/coverage/lcov.info
          flags: auth-service
          name: auth-service-coverage

  test-game-service:
    name: Test Game Service
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Build shared types
        run: npm run build --workspace=backend/shared/types
      
      - name: Run Game Service tests
        run: npm test --workspace=backend/services/game-service
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/services/game-service/coverage/lcov.info
          flags: game-service
          name: game-service-coverage

  test-ai-service:
    name: Test AI Service
    runs-on: ubuntu-latest
    if: false # Enable when AI service is implemented
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run AI Service tests
        run: npm test --workspace=backend/services/ai-service
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/services/ai-service/coverage/lcov.info
          flags: ai-service
          name: ai-service-coverage

  test-social-service:
    name: Test Social Service
    runs-on: ubuntu-latest
    if: false # Enable when social service is implemented
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Social Service tests
        run: npm test --workspace=backend/services/social-service
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/services/social-service/coverage/lcov.info
          flags: social-service
          name: social-service-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-auth-service, test-game-service]
    if: false # Enable when integration tests are ready
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: thinkrank_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/thinkrank_test
        run: npm run migrate:test
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/thinkrank_test
          REDIS_URL: redis://localhost:6379
        run: npm run test:integration

  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: [lint, test-auth-service, test-game-service]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [auth-service, game-service]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build service
        run: npm run build --workspace=backend/services/${{ matrix.service }}
      
      - name: Build Docker image
        run: |
          docker build -t thinkrank/${{ matrix.service }}:${{ github.sha }} \
            -f backend/services/${{ matrix.service }}/Dockerfile \
            backend/services/${{ matrix.service }}
      
      - name: Save Docker image
        run: docker save thinkrank/${{ matrix.service }}:${{ github.sha }} > ${{ matrix.service }}.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-${{ matrix.service }}
          path: ${{ matrix.service }}.tar

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && false # Enable when ready
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to staging
        run: |
          echo "Deployment to staging would happen here"
          # kubectl apply -k infrastructure/kubernetes/overlays/staging

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate